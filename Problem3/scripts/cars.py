#!/usr/bin/env python3


import json
import locale
import sys
import emails
import reports


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"sales": 0}
  pupolar_year = {"year": 0, "total_sales": 0}
  total_sales_per_year = {}

  # Optional Challenge
  car_maker_data = {}

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price

    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    
    # TODO: also handle max sales
    if item["total_sales"] > max_sales["sales"]:
      item["sales"] = item["total_sales"]
      max_sales = item

    # TODO: also handle most popular car_year
    year = item["car"]["car_year"]
    if year in total_sales_per_year.keys():
      total_sales_per_year[year] += item["total_sales"]
    else:
      total_sales_per_year[year] = item["total_sales"]
    
    if total_sales_per_year[year] > pupolar_year["total_sales"]:
      pupolar_year["total_sales"] = total_sales_per_year[year]
      pupolar_year["year"] = year

    # Optional Challenge
    car_maker = item["car"]["car_make"]
    if car_maker in car_maker_data.keys():
      car_maker_data[car_maker] += item["total_sales"]
    else:
      car_maker_data[car_maker] = item["total_sales"]

  summary = [
    "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["sales"]),
    "The most popular year was {} with {} sales.".format(pupolar_year["year"], pupolar_year["total_sales"]),
    car_maker_data
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  data = sorted(data, key=lambda k: k['total_sales'], reverse=True) # Optional Challenge
  pie_data = summary[3]
  table_data = cars_dict_to_table(data)
  title = "Sales summary for last month"
  additional_info = "{}<br/>{}<br/>{}".format(summary[0], summary[1], summary[2])
  reports.generate(filename="cars.pdf", title=title, additional_info=additional_info, table_data=table_data, pie_data=pie_data)
  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  recipient = "student@example.com"
  subject = "Sales summary for last month"
  body = "{}\n{}\n{}\n".format(summary[0], summary[1], summary[2])
  attachment = "cars.pdf"
  msg = emails.generate(sender=sender, recipient=recipient, subject=subject, body=body, attachment_path=attachment)
  print(pie_data)
  #emails.send(msg)


if __name__ == "__main__":
  main(sys.argv)
